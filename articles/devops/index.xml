<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devops on Not Applicable Doc</title>
    <link>https://doc.notapplicable.info/articles/devops/</link>
    <description>Recent content in Devops on Not Applicable Doc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Apr 2020 12:54:14 +0100</lastBuildDate><atom:link href="https://doc.notapplicable.info/articles/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Installing OwnCloud using Compose on a server running docker in a home network</title>
      <link>https://doc.notapplicable.info/articles/devops/installing-owncloud-using-compose-and-managing-upgrades/</link>
      <pubDate>Thu, 19 Nov 2020 14:46:58 +0100</pubDate>
      
      <guid>https://doc.notapplicable.info/articles/devops/installing-owncloud-using-compose-and-managing-upgrades/</guid>
      <description>installing OwnCloud create and change directory to a new directory in which to manage this compose application with :
mkdir ~/owncloud-docker-server cd ~/owncloud-docker-server create a file called .env with the following :
OWNCLOUD_VERSION=10.5 OWNCLOUD_DOMAIN=&amp;lt;hostname or ip address of your docker server&amp;gt; ADMIN_USERNAME=&amp;lt;admin user&amp;gt; ADMIN_PASSWORD=&amp;lt;admin password&amp;gt; HTTP_PORT=8080 being sure to edit in the ip address or hostname of the server that is running your docker instance on your home network, an admin user and an appropriate password.</description>
    </item>
    
    <item>
      <title>Docker Setup</title>
      <link>https://doc.notapplicable.info/articles/devops/docker-settup/</link>
      <pubDate>Thu, 19 Nov 2020 14:19:58 +0100</pubDate>
      
      <guid>https://doc.notapplicable.info/articles/devops/docker-settup/</guid>
      <description>docker on to Ubuntu 1804 The following should work for Ubuntu versions 16 18 and 20 and is taken directly from the docker documentation pages ( see References below ) but for completeness this procedure is test run on a new Ubuntu 1804 server installation.
First, the server is updated to ensure the latest packages are present on the system. Then docker is installed using the docker repositories and finally docker-compose is downloaded and added to the path, ready to use compose files in the normal running of docker and the life-cycle of stand alone containers upon this service.</description>
    </item>
    
    <item>
      <title>Deploying containers on single node docker nodes with compose</title>
      <link>https://doc.notapplicable.info/articles/devops/deploying_containers_on_single_node_docker_with_compose/</link>
      <pubDate>Fri, 13 Nov 2020 12:32:58 +0100</pubDate>
      
      <guid>https://doc.notapplicable.info/articles/devops/deploying_containers_on_single_node_docker_with_compose/</guid>
      <description>When deploying containers in Docker, possibly for later use in orchestration platforms such as Swarm, K8s, OpenShift it is common to want to test run a docker container firstly on a local service such as a laptop, workstation or stand alone server hosting docker containers.
It may be desirable to stop at this point and not to go to full cluster load balanced and high availability as is afforded by the likes of K8s as a &amp;lsquo;one off&amp;rsquo; or &amp;lsquo;private&amp;rsquo; implementation of an application does not necessarily need this degree of automation.</description>
    </item>
    
    <item>
      <title>Exposing Pods in K8s with Nginx Ingress</title>
      <link>https://doc.notapplicable.info/articles/devops/exposing_k8s_pods_with_nginx_ingress/</link>
      <pubDate>Fri, 13 Nov 2020 11:05:58 +0100</pubDate>
      
      <guid>https://doc.notapplicable.info/articles/devops/exposing_k8s_pods_with_nginx_ingress/</guid>
      <description>Prerequisites  A working K8s cluster Kubectl  see this article
Creating a test back-end service A deployment and service needs to be implemented to create :
  a pod with an application in this case called marshyon/test-node-listener - see this repo for the code behind this
  a service of type ClusterIP , the default if not specified and by its nature only available internally within the K8s cluster</description>
    </item>
    
    <item>
      <title>Exposing Pods in K8s to the outside world</title>
      <link>https://doc.notapplicable.info/articles/devops/exposing_k8s_pods_to_the_outside/</link>
      <pubDate>Sat, 07 Nov 2020 14:23:58 +0100</pubDate>
      
      <guid>https://doc.notapplicable.info/articles/devops/exposing_k8s_pods_to_the_outside/</guid>
      <description>Simple single pod deploy and exposure of service outside of K8s using a simple test nodejs docker container at :
https://hub.docker.com/r/marshyon/test-node-container
lets create a running pod using a pre-configured application from docker hub:
kubectl run node-test --image=marshyon/test-node-container --port=8080 this can be seen to be running within k8s by getting pods in the default namespace :
kubectl get pods NAME READY STATUS RESTARTS AGE node-test 1/1 Running 0 9m57s to expose this to the outside world we need to expose it using a load balancer :</description>
    </item>
    
    <item>
      <title>Deploying Kubernetes Clusters to Cloud Providers</title>
      <link>https://doc.notapplicable.info/articles/devops/deploying_kubernetes_clusters_with_different_cloud_providers/</link>
      <pubDate>Fri, 06 Nov 2020 14:10:58 +0100</pubDate>
      
      <guid>https://doc.notapplicable.info/articles/devops/deploying_kubernetes_clusters_with_different_cloud_providers/</guid>
      <description>K8s in any cloud platform is essentially just K8s, in that that it is still fundamentally Kubernetes &amp;lsquo;under the hood&amp;rsquo;. However there are different ways in which to deploy K8s in AWS for example as opposed to Azure, Google cloud and others.
When exposing services to the internet or rather, network sources outside that of the cluster, there are differences brought about by the way the prevailing service integrates with said exposure.</description>
    </item>
    
    <item>
      <title>Deploy a Go Web Service as an Azure Web Application Using Docker</title>
      <link>https://doc.notapplicable.info/articles/devops/deploy-a-go-web-service-as-an-azure-web-application-using-docker/</link>
      <pubDate>Fri, 10 Apr 2020 12:54:00 +0100</pubDate>
      
      <guid>https://doc.notapplicable.info/articles/devops/deploy-a-go-web-service-as-an-azure-web-application-using-docker/</guid>
      <description>Azure Web Applications can only support a limited number of languages and whilst Go was supported for a time it is no longer so as an alternative is to serve a custom Docker image with a Go web application within it, hosted on a public registry such as Docker Hub or a private one within Azure itself. The following focuses on the use of a private registry hosted in Azure.</description>
    </item>
    
  </channel>
</rss>
